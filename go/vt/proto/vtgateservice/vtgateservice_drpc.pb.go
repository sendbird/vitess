// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.23
// source: vtgateservice.proto

package vtgateservice

import (
	context "context"
	errors "errors"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
	vtgate "vitess.io/vitess/go/vt/proto/vtgate"
	vtproto "vitess.io/vitess/go/vt/servenv/vtproto"
)

type drpcEncoding_File_vtgateservice_proto struct{}

func (drpcEncoding_File_vtgateservice_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return vtproto.Marshal(msg)
}

func (drpcEncoding_File_vtgateservice_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return vtproto.Unmarshal(buf, msg)
}

func (drpcEncoding_File_vtgateservice_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return vtproto.JSONMarshal(msg)
}

func (drpcEncoding_File_vtgateservice_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return vtproto.JSONUnmarshal(buf, msg)
}

type DRPCVitessClient interface {
	DRPCConn() drpc.Conn

	Execute(ctx context.Context, in *vtgate.ExecuteRequest) (*vtgate.ExecuteResponse, error)
	ExecuteBatch(ctx context.Context, in *vtgate.ExecuteBatchRequest) (*vtgate.ExecuteBatchResponse, error)
	StreamExecute(ctx context.Context, in *vtgate.StreamExecuteRequest) (DRPCVitess_StreamExecuteClient, error)
	ResolveTransaction(ctx context.Context, in *vtgate.ResolveTransactionRequest) (*vtgate.ResolveTransactionResponse, error)
	VStream(ctx context.Context, in *vtgate.VStreamRequest) (DRPCVitess_VStreamClient, error)
	Prepare(ctx context.Context, in *vtgate.PrepareRequest) (*vtgate.PrepareResponse, error)
	CloseSession(ctx context.Context, in *vtgate.CloseSessionRequest) (*vtgate.CloseSessionResponse, error)
}

type drpcVitessClient struct {
	cc drpc.Conn
}

func NewDRPCVitessClient(cc drpc.Conn) DRPCVitessClient {
	return &drpcVitessClient{cc}
}

func (c *drpcVitessClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcVitessClient) Execute(ctx context.Context, in *vtgate.ExecuteRequest) (*vtgate.ExecuteResponse, error) {
	out := new(vtgate.ExecuteResponse)
	err := c.cc.Invoke(ctx, "/vtgateservice.Vitess/Execute", drpcEncoding_File_vtgateservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcVitessClient) ExecuteBatch(ctx context.Context, in *vtgate.ExecuteBatchRequest) (*vtgate.ExecuteBatchResponse, error) {
	out := new(vtgate.ExecuteBatchResponse)
	err := c.cc.Invoke(ctx, "/vtgateservice.Vitess/ExecuteBatch", drpcEncoding_File_vtgateservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcVitessClient) StreamExecute(ctx context.Context, in *vtgate.StreamExecuteRequest) (DRPCVitess_StreamExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, "/vtgateservice.Vitess/StreamExecute", drpcEncoding_File_vtgateservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcVitess_StreamExecuteClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCVitess_StreamExecuteClient interface {
	drpc.Stream
	Recv() (*vtgate.StreamExecuteResponse, error)
}

type drpcVitess_StreamExecuteClient struct {
	drpc.Stream
}

func (x *drpcVitess_StreamExecuteClient) Recv() (*vtgate.StreamExecuteResponse, error) {
	m := new(vtgate.StreamExecuteResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcVitessClient) ResolveTransaction(ctx context.Context, in *vtgate.ResolveTransactionRequest) (*vtgate.ResolveTransactionResponse, error) {
	out := new(vtgate.ResolveTransactionResponse)
	err := c.cc.Invoke(ctx, "/vtgateservice.Vitess/ResolveTransaction", drpcEncoding_File_vtgateservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcVitessClient) VStream(ctx context.Context, in *vtgate.VStreamRequest) (DRPCVitess_VStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, "/vtgateservice.Vitess/VStream", drpcEncoding_File_vtgateservice_proto{})
	if err != nil {
		return nil, err
	}
	x := &drpcVitess_VStreamClient{stream}
	if err := x.MsgSend(in, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return nil, err
	}
	if err := x.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DRPCVitess_VStreamClient interface {
	drpc.Stream
	Recv() (*vtgate.VStreamResponse, error)
}

type drpcVitess_VStreamClient struct {
	drpc.Stream
}

func (x *drpcVitess_VStreamClient) Recv() (*vtgate.VStreamResponse, error) {
	m := new(vtgate.VStreamResponse)
	if err := x.MsgRecv(m, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *drpcVitessClient) Prepare(ctx context.Context, in *vtgate.PrepareRequest) (*vtgate.PrepareResponse, error) {
	out := new(vtgate.PrepareResponse)
	err := c.cc.Invoke(ctx, "/vtgateservice.Vitess/Prepare", drpcEncoding_File_vtgateservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcVitessClient) CloseSession(ctx context.Context, in *vtgate.CloseSessionRequest) (*vtgate.CloseSessionResponse, error) {
	out := new(vtgate.CloseSessionResponse)
	err := c.cc.Invoke(ctx, "/vtgateservice.Vitess/CloseSession", drpcEncoding_File_vtgateservice_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCVitessServer interface {
	Execute(context.Context, *vtgate.ExecuteRequest) (*vtgate.ExecuteResponse, error)
	ExecuteBatch(context.Context, *vtgate.ExecuteBatchRequest) (*vtgate.ExecuteBatchResponse, error)
	StreamExecute(*vtgate.StreamExecuteRequest, DRPCVitess_StreamExecuteStream) error
	ResolveTransaction(context.Context, *vtgate.ResolveTransactionRequest) (*vtgate.ResolveTransactionResponse, error)
	VStream(*vtgate.VStreamRequest, DRPCVitess_VStreamStream) error
	Prepare(context.Context, *vtgate.PrepareRequest) (*vtgate.PrepareResponse, error)
	CloseSession(context.Context, *vtgate.CloseSessionRequest) (*vtgate.CloseSessionResponse, error)
}

type DRPCVitessUnimplementedServer struct{}

func (s *DRPCVitessUnimplementedServer) Execute(context.Context, *vtgate.ExecuteRequest) (*vtgate.ExecuteResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCVitessUnimplementedServer) ExecuteBatch(context.Context, *vtgate.ExecuteBatchRequest) (*vtgate.ExecuteBatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCVitessUnimplementedServer) StreamExecute(*vtgate.StreamExecuteRequest, DRPCVitess_StreamExecuteStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCVitessUnimplementedServer) ResolveTransaction(context.Context, *vtgate.ResolveTransactionRequest) (*vtgate.ResolveTransactionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCVitessUnimplementedServer) VStream(*vtgate.VStreamRequest, DRPCVitess_VStreamStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCVitessUnimplementedServer) Prepare(context.Context, *vtgate.PrepareRequest) (*vtgate.PrepareResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

func (s *DRPCVitessUnimplementedServer) CloseSession(context.Context, *vtgate.CloseSessionRequest) (*vtgate.CloseSessionResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), 12)
}

type DRPCVitessDescription struct{}

func (DRPCVitessDescription) NumMethods() int { return 7 }

func (DRPCVitessDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/vtgateservice.Vitess/Execute", drpcEncoding_File_vtgateservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCVitessServer).
					Execute(
						ctx,
						in1.(*vtgate.ExecuteRequest),
					)
			}, DRPCVitessServer.Execute, true
	case 1:
		return "/vtgateservice.Vitess/ExecuteBatch", drpcEncoding_File_vtgateservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCVitessServer).
					ExecuteBatch(
						ctx,
						in1.(*vtgate.ExecuteBatchRequest),
					)
			}, DRPCVitessServer.ExecuteBatch, true
	case 2:
		return "/vtgateservice.Vitess/StreamExecute", drpcEncoding_File_vtgateservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCVitessServer).
					StreamExecute(
						in1.(*vtgate.StreamExecuteRequest),
						&drpcVitess_StreamExecuteStream{in2.(drpc.Stream)},
					)
			}, DRPCVitessServer.StreamExecute, true
	case 3:
		return "/vtgateservice.Vitess/ResolveTransaction", drpcEncoding_File_vtgateservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCVitessServer).
					ResolveTransaction(
						ctx,
						in1.(*vtgate.ResolveTransactionRequest),
					)
			}, DRPCVitessServer.ResolveTransaction, true
	case 4:
		return "/vtgateservice.Vitess/VStream", drpcEncoding_File_vtgateservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCVitessServer).
					VStream(
						in1.(*vtgate.VStreamRequest),
						&drpcVitess_VStreamStream{in2.(drpc.Stream)},
					)
			}, DRPCVitessServer.VStream, true
	case 5:
		return "/vtgateservice.Vitess/Prepare", drpcEncoding_File_vtgateservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCVitessServer).
					Prepare(
						ctx,
						in1.(*vtgate.PrepareRequest),
					)
			}, DRPCVitessServer.Prepare, true
	case 6:
		return "/vtgateservice.Vitess/CloseSession", drpcEncoding_File_vtgateservice_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCVitessServer).
					CloseSession(
						ctx,
						in1.(*vtgate.CloseSessionRequest),
					)
			}, DRPCVitessServer.CloseSession, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterVitess(mux drpc.Mux, impl DRPCVitessServer) error {
	return mux.Register(impl, DRPCVitessDescription{})
}

type DRPCVitess_ExecuteStream interface {
	drpc.Stream
	SendAndClose(*vtgate.ExecuteResponse) error
}

type drpcVitess_ExecuteStream struct {
	drpc.Stream
}

func (x *drpcVitess_ExecuteStream) SendAndClose(m *vtgate.ExecuteResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCVitess_ExecuteBatchStream interface {
	drpc.Stream
	SendAndClose(*vtgate.ExecuteBatchResponse) error
}

type drpcVitess_ExecuteBatchStream struct {
	drpc.Stream
}

func (x *drpcVitess_ExecuteBatchStream) SendAndClose(m *vtgate.ExecuteBatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCVitess_StreamExecuteStream interface {
	drpc.Stream
	Send(*vtgate.StreamExecuteResponse) error
}

type drpcVitess_StreamExecuteStream struct {
	drpc.Stream
}

func (x *drpcVitess_StreamExecuteStream) Send(m *vtgate.StreamExecuteResponse) error {
	return x.MsgSend(m, drpcEncoding_File_vtgateservice_proto{})
}

type DRPCVitess_ResolveTransactionStream interface {
	drpc.Stream
	SendAndClose(*vtgate.ResolveTransactionResponse) error
}

type drpcVitess_ResolveTransactionStream struct {
	drpc.Stream
}

func (x *drpcVitess_ResolveTransactionStream) SendAndClose(m *vtgate.ResolveTransactionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCVitess_VStreamStream interface {
	drpc.Stream
	Send(*vtgate.VStreamResponse) error
}

type drpcVitess_VStreamStream struct {
	drpc.Stream
}

func (x *drpcVitess_VStreamStream) Send(m *vtgate.VStreamResponse) error {
	return x.MsgSend(m, drpcEncoding_File_vtgateservice_proto{})
}

type DRPCVitess_PrepareStream interface {
	drpc.Stream
	SendAndClose(*vtgate.PrepareResponse) error
}

type drpcVitess_PrepareStream struct {
	drpc.Stream
}

func (x *drpcVitess_PrepareStream) SendAndClose(m *vtgate.PrepareResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCVitess_CloseSessionStream interface {
	drpc.Stream
	SendAndClose(*vtgate.CloseSessionResponse) error
}

type drpcVitess_CloseSessionStream struct {
	drpc.Stream
}

func (x *drpcVitess_CloseSessionStream) SendAndClose(m *vtgate.CloseSessionResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_vtgateservice_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
