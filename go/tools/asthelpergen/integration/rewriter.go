/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by ASTHelperGen. DO NOT EDIT.

package integration

func (a *application) apply(parent, node AST, replacer replacerFunc) {
	if node == nil || isNilValue(node) {
		return
	}
	saved := a.cursor
	a.cursor.replacer = replacer
	a.cursor.node = node
	a.cursor.parent = parent
	if a.pre != nil && !a.pre(&a.cursor) {
		a.cursor = saved
		return
	}
	switch n := node.(type) {
	case Bytes:
	case InterfaceContainer:
	case InterfaceSlice:
		for x, el := range n {
			a.apply(node, el, func(idx int) func(AST, AST) {
				return func(newNode, container AST) {
					container.(InterfaceSlice)[idx] = newNode.(AST)
				}
			}(x))
		}
	case *Leaf:
	case LeafSlice:
		for x, el := range n {
			a.apply(node, el, func(idx int) func(AST, AST) {
				return func(newNode, container AST) {
					container.(LeafSlice)[idx] = newNode.(*Leaf)
				}
			}(x))
		}
	case *NoCloneType:
	case *RefContainer:
		a.apply(node, n.ASTType, func(newNode, parent AST) {
			parent.(*RefContainer).ASTType = newNode.(AST)
		})
		a.apply(node, n.ASTImplementationType, func(newNode, parent AST) {
			parent.(*RefContainer).ASTImplementationType = newNode.(*Leaf)
		})
	case *RefSliceContainer:
		for x, el := range n.ASTElements {
			a.apply(node, el, func(idx int) func(AST, AST) {
				return func(newNode, container AST) {
					container.(*RefSliceContainer).ASTElements[idx] = newNode.(AST)
				}
			}(x))
		}
		for x, el := range n.ASTImplementationElements {
			a.apply(node, el, func(idx int) func(AST, AST) {
				return func(newNode, container AST) {
					container.(*RefSliceContainer).ASTImplementationElements[idx] = newNode.(*Leaf)
				}
			}(x))
		}
	case *SubImpl:
		a.apply(node, n.inner, func(newNode, parent AST) {
			parent.(*SubImpl).inner = newNode.(SubIface)
		})
	case ValueContainer:
		a.apply(node, n.ASTType, replacePanic("ValueContainer ASTType"))
		a.apply(node, n.ASTImplementationType, replacePanic("ValueContainer ASTImplementationType"))
	case ValueSliceContainer:
		for x, el := range n.ASTElements {
			a.apply(node, el, func(idx int) func(AST, AST) {
				return func(newNode, container AST) {
					container.(ValueSliceContainer).ASTElements[idx] = newNode.(AST)
				}
			}(x))
		}
		for x, el := range n.ASTImplementationElements {
			a.apply(node, el, func(idx int) func(AST, AST) {
				return func(newNode, container AST) {
					container.(ValueSliceContainer).ASTImplementationElements[idx] = newNode.(*Leaf)
				}
			}(x))
		}
	}
	if a.post != nil && !a.post(&a.cursor) {
		panic(abort)
	}
	a.cursor = saved
}
