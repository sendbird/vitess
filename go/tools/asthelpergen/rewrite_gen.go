/*
Copyright 2021 The Vitess Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package asthelpergen

import (
	"fmt"
	"go/types"

	"github.com/dave/jennifer/jen"
)

const (
	rewriteName = "rewrite"
)

type rewriteGen struct {
	ifaceName string
	file      *jen.File
}

var _ generator = (*rewriteGen)(nil)

func newRewriterGen(pkgname string, ifaceName string) *rewriteGen {
	file := jen.NewFile(pkgname)
	file.HeaderComment(licenseFileHeader)
	file.HeaderComment("Code generated by ASTHelperGen. DO NOT EDIT.")

	return &rewriteGen{
		ifaceName: ifaceName,
		file:      file,
	}
}

func (r *rewriteGen) genFile() (string, *jen.File) {
	return "ast_rewrite.go", r.file
}

func (r *rewriteGen) interfaceMethod(t types.Type, iface *types.Interface, spi generatorSPI) error {
	if !shouldAdd(t, spi.iface()) {
		return nil
	}
	/*
		func VisitAST(in AST) (bool, error) {
			if in == nil {
				return false, nil
			}
			switch a := inA.(type) {
			case *SubImpl:
				return VisitSubImpl(a, b)
			default:
				return false, nil
			}
		}
	*/
	stmts := []jen.Code{
		jen.If(jen.Id("node == nil").Block(returnTrue())),
	}
	stmtsF := []jen.Code{
		jen.If(jen.Id("node == nil").Block(jen.Return())),
	}

	var cases []jen.Code
	var casesF []jen.Code
	_ = spi.findImplementations(iface, func(t types.Type) error {
		if _, ok := t.Underlying().(*types.Interface); ok {
			return nil
		}
		typeString := types.TypeString(t, noQualifier)
		funcName := rewriteName + printableTypeName(t)
		spi.addType(t)
		call := jen.Id("a").Dot(funcName).Call(jen.Id("parent, node, replacer"))
		cases = append(cases, jen.Case(jen.Id(typeString)).Block(
			jen.Return(call),
		))
		casesF = append(casesF, jen.Case(jen.Id(typeString)).Block(
			call,
		))
		return nil
	})

	cases = append(cases,
		jen.Default().Block(
			jen.Comment("this should never happen"),
			returnTrue(),
		))

	stmts = append(stmts, jen.Switch(jen.Id("node := node.(type)").Block(
		cases...,
	)))
	stmtsF = append(stmtsF,
		jen.Switch(jen.Id("node := node.(type)").Block(casesF...)),
	)

	r.addFuncToApplication(t, stmts)
	r.addFuncToApplicationP(t, stmtsF)
	return nil
}

func (r *rewriteGen) structMethod(t types.Type, strct *types.Struct, spi generatorSPI) error {
	if !shouldAdd(t, spi.iface()) {
		return nil
	}
	fields := r.rewriteAllStructFields(t, strct, spi, true)

	stmts := []jen.Code{executePre()}
	stmts = append(stmts, fields...)
	stmts = append(stmts, executePost(len(fields) > 0))
	stmts = append(stmts, returnTrue())

	r.addFuncToApplication(t, stmts)

	fieldsP := r.rewriteAllStructFieldsP(t, strct, spi, true)
	hasChildren := len(fieldsP) > 0
	stmtsF := executePreP(hasChildren)
	stmtsF = append(stmtsF, fieldsP...)
	stmtsF = append(stmtsF, execPostP(hasChildren)...)

	r.addFuncToApplicationP(t, stmtsF)
	return nil
}

func execPostP(children bool) []jen.Code {
	exec := jen.Id("a.post(&a.cur)")

	if children {
		return []jen.Code{jen.Id("a.cur = cursor"), exec}
	}
	return []jen.Code{exec}
}

func (r *rewriteGen) ptrToStructMethod(t types.Type, strct *types.Struct, spi generatorSPI) error {
	if !shouldAdd(t, spi.iface()) {
		return nil
	}

	/*
		if node == nil { return nil }
	*/
	stmts := []jen.Code{jen.If(jen.Id("node == nil").Block(returnTrue()))}

	/*
		if !pre(&cur) {
			return nil
		}
	*/
	stmts = append(stmts, executePre())
	fields := r.rewriteAllStructFields(t, strct, spi, false)
	stmts = append(stmts, fields...)
	hasChildren := len(fields) > 0
	stmts = append(stmts, executePost(hasChildren))
	stmts = append(stmts, returnTrue())

	r.addFuncToApplication(t, stmts)

	stmtsP := []jen.Code{jen.If(jen.Id("node == nil").Block(jen.Return()))}

	fields = r.rewriteAllStructFieldsP(t, strct, spi, false)
	stmtsP = append(stmtsP, executePreP(hasChildren)...)
	stmtsP = append(stmtsP, fields...)
	stmtsP = append(stmtsP, execPostP(hasChildren)...)

	r.addFuncToApplicationP(t, stmtsP)

	return nil
}

func (r *rewriteGen) ptrToBasicMethod(t types.Type, _ *types.Basic, spi generatorSPI) error {
	if !shouldAdd(t, spi.iface()) {
		return nil
	}

	stmts := []jen.Code{
		jen.Comment("ptrToBasicMethod"),
	}
	r.addFuncToApplication(t, stmts)

	return nil
}

func (r *rewriteGen) sliceMethod(t types.Type, slice *types.Slice, spi generatorSPI) error {
	if !shouldAdd(t, spi.iface()) {
		return nil
	}

	/*
		if node == nil {
				return nil
			}
			cur := Cursor{
				node:     node,
				parent:   parent,
				replacer: replacer,
			}
			if !pre(&cur) {
				return nil
			}
	*/
	stmts := []jen.Code{
		jen.If(jen.Id("node == nil").Block(returnTrue())),
	}

	typeString := types.TypeString(t, noQualifier)

	preStmts := setupCursor()
	preStmts = append(preStmts,
		jen.Id("kontinue").Op(":=").Id("!a.pre(&a.cur)"),
		jen.If(jen.Id("a.cur.revisit").Block(
			jen.Id("node").Op("=").Id("a.cur.node.("+typeString+")"),
			jen.Id("a.cur.revisit").Op("=").False(),
			jen.Return(jen.Id("a.rewrite"+typeString+"(parent, node, replacer)")),
		)),
		jen.If(jen.Id("kontinue").Block(jen.Return(jen.True()))),
	)

	stmts = append(stmts, jen.If(jen.Id("a.pre!= nil").Block(preStmts...)))

	addElements := shouldAdd(slice.Elem(), spi.iface())
	if addElements {
		/*
			for i, el := range node {
						if err := rewriteRefOfLeaf(node, el, func(newNode, parent AST) {
							parent.(LeafSlice)[i] = newNode.(*Leaf)
						}, pre, post); err != nil {
							return err
						}
					}
		*/
		stmts = append(stmts,
			jen.For(jen.Id("x, el").Op(":=").Id("range node")).
				Block(r.rewriteChildSlice(t, slice.Elem(), "notUsed", jen.Id("el"), jen.Index(jen.Id("idx")), false)))
	}

	stmts = append(stmts, executePost(addElements))
	stmts = append(stmts, returnTrue())

	r.addFuncToApplication(t, stmts)

	stmtsP := []jen.Code{
		jen.If(jen.Id("node == nil").Block(jen.Return())),
	}

	stmtsP = append(stmtsP, executePreP(addElements)...)
	stmtsP = append(stmtsP,
		jen.If(jen.Id("a.cur.revisit").Block(
			jen.Id("node").Op("=").Id("a.cur.node.("+typeString+")"),
			jen.Id("a.cur.revisit").Op("=").False(),
			jen.Id("a.rewrite"+typeString+"(parent, node, replacer)"),
			jen.Return(),
		)),
	)
	if addElements {
		/*
			for i, el := range node {
						if err := rewriteRefOfLeaf(node, el, func(newNode, parent AST) {
							parent.(LeafSlice)[i] = newNode.(*Leaf)
						}, pre, post); err != nil {
							return err
						}
					}
		*/
		stmtsP = append(stmtsP,
			jen.For(jen.Id("x, el").Op(":=").Id("range node")).
				Block(r.rewriteChildSliceP(t, slice.Elem(), "notUsed", jen.Id("el"), jen.Index(jen.Id("idx")), false)))
	}

	stmtsP = append(stmtsP, execPostP(addElements)...)
	r.addFuncToApplicationP(t, stmtsP)

	return nil
}

func setupCursor() []jen.Code {
	return []jen.Code{
		jen.Id("a.cur.replacer = replacer"),
		jen.Id("a.cur.parent = parent"),
		jen.Id("a.cur.node = node"),
	}
}
func executePre() jen.Code {
	curStmts := setupCursor()
	curStmts = append(curStmts, jen.If(jen.Id("!a.pre(&a.cur)")).Block(returnTrue()))
	return jen.If(jen.Id("a.pre!= nil").Block(curStmts...))
}
func executePreP(children bool) []jen.Code {
	if children {
		return append(
			setupCursor(),
			jen.Id("cursor := a.cur"),
			jen.Id("a.pre(&a.cur)"),
		)
	}
	return append(
		setupCursor(),
		jen.Id("a.pre(&a.cur)"),
	)
}

func executePost(seenChildren bool) jen.Code {
	var curStmts []jen.Code
	if seenChildren {
		// if we have visited children, we have to write to the cursor fields
		curStmts = setupCursor()
	} else {
		curStmts = append(curStmts,
			jen.If(jen.Id("a.pre == nil")).Block(setupCursor()...))
	}

	curStmts = append(curStmts, jen.If(jen.Id("!a.post(&a.cur)")).Block(returnFalse()))

	return jen.If(jen.Id("a.post != nil")).Block(curStmts...)
}

func (r *rewriteGen) basicMethod(t types.Type, _ *types.Basic, spi generatorSPI) error {
	if !shouldAdd(t, spi.iface()) {
		return nil
	}

	r.addFuncToApplication(t, []jen.Code{
		executePre(),
		executePost(false),
		returnTrue()})

	codes := append(executePreP(false), execPostP(false)...)
	r.addFuncToApplicationP(t, codes)
	return nil
}

func (r *rewriteGen) addFuncToApplicationP(t types.Type, stmts []jen.Code) {
	/*
		func (a *application) rewriteNodeType(parent AST, node NodeType, replacer replacerFunc) {
	*/

	typeString := types.TypeString(t, noQualifier)
	funcName := fmt.Sprintf("%s%s", rewriteName, printableTypeName(t))

	codeF := jen.Func().Params(
		jen.Id("a").Op("*").Id("applicationP"),
	).Id(funcName).Params(
		jen.Id(fmt.Sprintf("parent %s, node %s, replacer replacerFunc", r.ifaceName, typeString)),
	).Block(stmts...)

	r.file.Add(codeF)
}

func (r *rewriteGen) rewriteAllStructFields(t types.Type, strct *types.Struct, spi generatorSPI, fail bool) []jen.Code {
	/*
		if errF := rewriteAST(node, node.ASTType, func(newNode, parent AST) {
			err = vterrors.New(vtrpcpb.Code_INTERNAL, "[BUG] tried to replace '%s' on '%s'")
		}, pre, post); errF != nil {
			return errF
		}

	*/
	var output []jen.Code
	for i := 0; i < strct.NumFields(); i++ {
		field := strct.Field(i)
		if types.Implements(field.Type(), spi.iface()) {
			spi.addType(field.Type())
			output = append(output, r.rewriteChild(t, field.Type(), field.Name(), jen.Id("node").Dot(field.Name()), jen.Dot(field.Name()), fail))
			continue
		}
		slice, isSlice := field.Type().(*types.Slice)
		if isSlice && types.Implements(slice.Elem(), spi.iface()) {
			spi.addType(slice.Elem())
			id := jen.Id("x")
			if fail {
				id = jen.Id("_")
			}
			output = append(output,
				jen.For(jen.List(id, jen.Id("el")).Op(":=").Id("range node."+field.Name())).
					Block(r.rewriteChildSlice(t, slice.Elem(), field.Name(), jen.Id("el"), jen.Dot(field.Name()).Index(jen.Id("idx")), fail)))
		}
	}
	return output
}
func (r *rewriteGen) rewriteAllStructFieldsP(t types.Type, strct *types.Struct, spi generatorSPI, fail bool) []jen.Code {
	/*
		if errF := rewriteAST(node, node.ASTType, func(newNode, parent AST) {
			err = vterrors.New(vtrpcpb.Code_INTERNAL, "[BUG] tried to replace '%s' on '%s'")
		}, pre, post); errF != nil {
			return errF
		}

	*/
	var output []jen.Code
	for i := 0; i < strct.NumFields(); i++ {
		field := strct.Field(i)
		if types.Implements(field.Type(), spi.iface()) {
			spi.addType(field.Type())
			output = append(output, r.rewriteChildP(t, field.Type(), field.Name(), jen.Id("node").Dot(field.Name()), jen.Dot(field.Name()), fail))
			continue
		}
		slice, isSlice := field.Type().(*types.Slice)
		if isSlice && types.Implements(slice.Elem(), spi.iface()) {
			spi.addType(slice.Elem())
			id := jen.Id("x")
			if fail {
				id = jen.Id("_")
			}
			output = append(output,
				jen.For(jen.List(id, jen.Id("el")).Op(":=").Id("range node."+field.Name())).
					Block(r.rewriteChildSliceP(t, slice.Elem(), field.Name(), jen.Id("el"), jen.Dot(field.Name()).Index(jen.Id("idx")), fail)))
		}
	}
	return output
}

func failReplacer(t types.Type, f string) *jen.Statement {
	typeString := types.TypeString(t, noQualifier)
	return jen.Panic(jen.Lit(fmt.Sprintf("[BUG] tried to replace '%s' on '%s'", f, typeString)))
}

func (r *rewriteGen) rewriteChild(t, field types.Type, fieldName string, param jen.Code, replace jen.Code, fail bool) jen.Code {
	/*
		if errF := rewriteAST(node, node.ASTType, func(newNode, parent AST) {
			parent.(*RefContainer).ASTType = newNode.(AST)
		}, pre, post); errF != nil {
			return errF
		}

		if errF := rewriteAST(node, el, func(newNode, parent AST) {
			parent.(*RefSliceContainer).ASTElements[i] = newNode.(AST)
		}, pre, post); errF != nil {
			return errF
		}

	*/
	funcName := rewriteName + printableTypeName(field)
	replaceOrFail := replaceOrFail(t, field, fieldName, replace, fail)
	funcBlock := jen.Func().Call(jen.Id("newNode, parent").Id(r.ifaceName)).
		Block(replaceOrFail)

	rewriteField := jen.If(
		jen.Op("!").Id("a").Dot(funcName).Call(
			jen.Id("node"),
			param,
			funcBlock).Block(returnFalse()))

	return rewriteField
}
func (r *rewriteGen) rewriteChildP(t, field types.Type, fieldName string, param jen.Code, replace jen.Code, fail bool) jen.Code {
	/*
		rewriteAST(node, node.ASTType, func(newNode, parent AST) {
			parent.(*RefContainer).ASTType = newNode.(AST)
		}, pre, post); errF != nil {
			return errF
		}

		if errF := rewriteAST(node, el, func(newNode, parent AST) {
			parent.(*RefSliceContainer).ASTElements[i] = newNode.(AST)
		}, pre, post); errF != nil {
			return errF
		}

	*/
	funcName := rewriteName + printableTypeName(field)
	replaceOrFail := replaceOrFail(t, field, fieldName, replace, fail)
	funcBlock := jen.Func().Call(jen.Id("newNode, parent").Id(r.ifaceName)).
		Block(replaceOrFail)

	rewriteField := jen.Id("a").Dot(funcName).Call(
		jen.Id("node"),
		param,
		funcBlock)

	return rewriteField
}

func replaceOrFail(t, field types.Type, fieldName string, replace jen.Code, fail bool) jen.Code {
	if fail {
		return failReplacer(t, fieldName)
	}
	return jen.Id("parent").
		Assert(jen.Id(types.TypeString(t, noQualifier))).
		Add(replace).
		Op("=").
		Id("newNode").Assert(jen.Id(types.TypeString(field, noQualifier)))
}

func (r *rewriteGen) rewriteChildSlice(t, field types.Type, fieldName string, param jen.Code, replace jen.Code, fail bool) jen.Code {
	/*
				if errF := a.rewriteAST(node, el, func(idx int) replacerFunc {
				return func(newNode, parent AST) {
					parent.(InterfaceSlice)[idx] = newNode.(AST)
				}
			}(i)); errF != nil {
				return errF
			}

			if errF := a.rewriteAST(node, el, func(newNode, parent AST) {
		return errr...
		}); errF != nil {
				return errF
			}

	*/

	funcName := rewriteName + printableTypeName(field)
	var funcBlock jen.Code
	replacerFuncDef := jen.Func().Call(jen.Id("newNode, parent").Id(r.ifaceName))
	if fail {
		funcBlock = replacerFuncDef.Block(failReplacer(t, fieldName))
	} else {
		funcBlock = jen.Func().Call(jen.Id("idx int")).Id("replacerFunc").
			Block(jen.Return(replacerFuncDef.Block(
				jen.Id("parent").Assert(jen.Id(types.TypeString(t, noQualifier))).Add(replace).Op("=").Id("newNode").Assert(jen.Id(types.TypeString(field, noQualifier)))),
			)).Call(jen.Id("x"))
	}

	rewriteField := jen.If(
		jen.Op("!").Id("a").Dot(funcName).Call(
			jen.Id("node"),
			param,
			funcBlock).Block(returnFalse()))

	return rewriteField
}
func (r *rewriteGen) rewriteChildSliceP(t, field types.Type, fieldName string, param jen.Code, replace jen.Code, fail bool) jen.Code {
	/*
				if errF := a.rewriteAST(node, el, func(idx int) replacerFunc {
				return func(newNode, parent AST) {
					parent.(InterfaceSlice)[idx] = newNode.(AST)
				}
			}(i)); errF != nil {
				return errF
			}

			if errF := a.rewriteAST(node, el, func(newNode, parent AST) {
		return errr...
		}); errF != nil {
				return errF
			}

	*/

	funcName := rewriteName + printableTypeName(field)
	var funcBlock jen.Code
	replacerFuncDef := jen.Func().Call(jen.Id("newNode, parent").Id(r.ifaceName))
	if fail {
		funcBlock = replacerFuncDef.Block(failReplacer(t, fieldName))
	} else {
		funcBlock = jen.Func().Call(jen.Id("idx int")).Id("replacerFunc").
			Block(jen.Return(replacerFuncDef.Block(
				jen.Id("parent").Assert(jen.Id(types.TypeString(t, noQualifier))).Add(replace).Op("=").Id("newNode").Assert(jen.Id(types.TypeString(field, noQualifier)))),
			)).Call(jen.Id("x"))
	}

	rewriteField := jen.Id("a").Dot(funcName).Call(
		jen.Id("node"),
		param,
		funcBlock)

	return rewriteField
}

func (r *rewriteGen) addFuncToApplication(t types.Type, stmts []jen.Code) {
	/*
		func (a *application) rewriteNodeType(parent AST, node NodeType, replacer replacerFunc) {
	*/

	typeString := types.TypeString(t, noQualifier)
	funcName := fmt.Sprintf("%s%s", rewriteName, printableTypeName(t))
	code := jen.Func().Params(
		jen.Id("a").Op("*").Id("application"),
	).Id(funcName).Params(
		jen.Id(fmt.Sprintf("parent %s, node %s, replacer replacerFunc", r.ifaceName, typeString)),
	).Bool().Block(stmts...)

	r.file.Add(code)
}

var noQualifier = func(p *types.Package) string {
	return ""
}

func returnTrue() jen.Code {
	return jen.Return(jen.True())
}

func returnFalse() jen.Code {
	return jen.Return(jen.False())
}
